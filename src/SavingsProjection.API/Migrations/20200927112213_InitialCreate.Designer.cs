// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SavingsProjection.API.Infrastructure;

namespace SavingsProjection.API.Migrations
{
    [DbContext(typeof(SavingProjectionContext))]
    [Migration("20200927112213_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8");

            modelBuilder.Entity("SavingsProjection.API.Models.Configuration", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<short>("EndPeriodRecurrencyInterval")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndPeriodRecurrencyType")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("SavingsProjection.API.Models.FixedMoneyItem", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AccumulateForBudget")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<short>("TimelineWeight")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("FixedMoneyItems");
                });

            modelBuilder.Entity("SavingsProjection.API.Models.MaterializedMoneyItem", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EndPeriod")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Projection")
                        .HasColumnType("TEXT");

                    b.Property<short>("TimelineWeight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("MaterializedMoneyItems");
                });

            modelBuilder.Entity("SavingsProjection.API.Models.MoneyCategory", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Description")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("MoneyCategories");
                });

            modelBuilder.Entity("SavingsProjection.API.Models.RecurrencyAdjustement", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RecurrencyDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("RecurrencyMoneyItemID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("RecurrencyNewAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RecurrencyNewDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("RecurrentMoneyItemID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("RecurrentMoneyItemID");

                    b.ToTable("RecurrencyAdjustements");
                });

            modelBuilder.Entity("SavingsProjection.API.Models.RecurrentMoneyItem", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<short>("RecurrencyInterval")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecurrencyType")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("RecurrentMoneyItemID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Root")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<short>("TimelineWeight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("RecurrentMoneyItemID");

                    b.ToTable("RecurrentMoneyItems");
                });

            modelBuilder.Entity("SavingsProjection.API.Models.FixedMoneyItem", b =>
                {
                    b.HasOne("SavingsProjection.API.Models.MoneyCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");
                });

            modelBuilder.Entity("SavingsProjection.API.Models.MaterializedMoneyItem", b =>
                {
                    b.HasOne("SavingsProjection.API.Models.MoneyCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");
                });

            modelBuilder.Entity("SavingsProjection.API.Models.RecurrencyAdjustement", b =>
                {
                    b.HasOne("SavingsProjection.API.Models.RecurrentMoneyItem", null)
                        .WithMany("Adjustements")
                        .HasForeignKey("RecurrentMoneyItemID");
                });

            modelBuilder.Entity("SavingsProjection.API.Models.RecurrentMoneyItem", b =>
                {
                    b.HasOne("SavingsProjection.API.Models.MoneyCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");

                    b.HasOne("SavingsProjection.API.Models.RecurrentMoneyItem", null)
                        .WithMany("AssociatedItems")
                        .HasForeignKey("RecurrentMoneyItemID");
                });
#pragma warning restore 612, 618
        }
    }
}
